# -*- coding: utf-8 -*-
"""2A-GONZAGA-EXER6

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1duJ2Xrm8gZo9psGBMHtXGGbK9_gFQ_Sx
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('onlinefoods.csv')

"""Handle Missing values"""

missing_values = df.isnull().sum()

df_dummies = pd.get_dummies(df, drop_first=True)
df_dummies['Feedback'] = (df['Family size'] > 1).astype(int)

"""Feature Selection"""

X = df_dummies.drop(['latitude','longitude','Pin code','Feedback'], axis=1)
y = df_dummies['Feedback']

X.describe()

plt.figure(figsize=(10, 6))
sns.histplot(x='Age', data=df, hue='Feedback', kde=True)
plt.title("Distribution of Age and its Impact on Feedback")
plt.xlabel("Age")
plt.ylabel("Count")
plt.show()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print("\nModel Evaluation:")
print("Accuracy:", accuracy)
print("\nConfusion Matrix:")
print(conf_matrix)
print("\nClassification Report:")
print(classification_rep)

feature_importance = pd.DataFrame({'Feature': X.columns, 'Importance': model.coef_[0]})
feature_importance = feature_importance.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feature_importance)
plt.title("Feature Importance in Logistic Regression Model")
plt.xlabel("Importance")
plt.ylabel("Feature")
plt.show()

y_probs = model.predict_proba(X_test)[:, 1]

plt.figure(figsize=(10, 6))
sns.histplot(y_probs, kde=True)
plt.title("Distribution of Predicted Probabilities")
plt.xlabel("Predicted Probability")
plt.ylabel("Count")
plt.show()

